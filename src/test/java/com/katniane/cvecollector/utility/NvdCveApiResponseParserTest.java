package com.katniane.cvecollector.utility;

import java.util.List;

import org.junit.jupiter.api.Test;

import com.katniane.cvecollector.domain.Cpe;
import com.katniane.cvecollector.domain.Cve;
import com.katniane.cvecollector.packager.NvdCveApiResponsePackager;
import com.katniane.cvecollector.utility.NvdCveApiResponseParser;

import org.junit.Assert;

public class NvdCveApiResponseParserTest {
	
	@Test
	void testNvdCveApiResponseParser() {
		List<Cve> cves = NvdCveApiResponseParser.parseNvdCveApiResponse(NvdCveApiResponsePackager.packageAsSpringBootCpeCveResponse());
		Assert.assertEquals(4, cves.size());
		
		Cve cve = cves.get(0);
		Assert.assertFalse(cve.getId().isEmpty());
		//Assert.assertEquals(2, cve.getConfigurations().size());
		Assert.assertFalse(cve.getLastModified().isEmpty());
		Assert.assertFalse(cve.getPublished().isEmpty());
		Assert.assertFalse(cve.getSourceIdentifier().isEmpty());
		Assert.assertFalse(cve.getVulnStatus().isEmpty());
		//Assert.assertEquals(2, cve.getDescriptions().size());
		Assert.assertEquals(4, cve.getReferences().size());
		//Assert.assertEquals(1, cve.getWeaknesses().size());
		//Assert.assertNotNull(cve.getMetrics());
		//Assert.assertEquals(1, cve.getMetrics().getCvssMetricsV2().size());
		
		Cve cve2 = cves.get(1);
		Assert.assertFalse(cve2.getId().isEmpty());
		//Assert.assertEquals(1, cve2.getConfigurations().size());
		Assert.assertFalse(cve2.getLastModified().isEmpty());
		Assert.assertFalse(cve2.getPublished().isEmpty());
		Assert.assertFalse(cve2.getSourceIdentifier().isEmpty());
		Assert.assertFalse(cve2.getVulnStatus().isEmpty());
		//Assert.assertEquals(2, cve2.getDescriptions().size());
		Assert.assertEquals(1, cve2.getReferences().size());
		//Assert.assertEquals(1, cve2.getWeaknesses().size());
		//Assert.assertNotNull(cve2.getMetrics());
		//Assert.assertEquals(1, cve2.getMetrics().getCvssMetricsV2().size());
		
		Cve cve3 = cves.get(2);
		Assert.assertFalse(cve3.getId().isEmpty());
		//Assert.assertEquals(2, cve3.getConfigurations().size());
		Assert.assertFalse(cve3.getLastModified().isEmpty());
		Assert.assertFalse(cve3.getPublished().isEmpty());
		Assert.assertFalse(cve3.getSourceIdentifier().isEmpty());
		Assert.assertFalse(cve3.getVulnStatus().isEmpty());
		//Assert.assertEquals(2, cve3.getDescriptions().size());
		Assert.assertEquals(1, cve3.getReferences().size());
		//Assert.assertEquals(1, cve3.getWeaknesses().size());
		//Assert.assertNotNull(cve3.getMetrics());
		//Assert.assertEquals(1, cve3.getMetrics().getCvssMetricsV2().size());
		
		Cve cve4 = cves.get(3);
		Assert.assertFalse(cve4.getId().isEmpty());
		//Assert.assertEquals(1, cve4.getConfigurations().size());
		Assert.assertFalse(cve4.getLastModified().isEmpty());
		Assert.assertFalse(cve4.getPublished().isEmpty());
		Assert.assertFalse(cve4.getSourceIdentifier().isEmpty());
		Assert.assertFalse(cve4.getVulnStatus().isEmpty());
		//Assert.assertEquals(2, cve4.getDescriptions().size());
		Assert.assertEquals(1, cve4.getReferences().size());
		//Assert.assertEquals(1, cve4.getWeaknesses().size());
		//Assert.assertNotNull(cve4.getMetrics());
		//Assert.assertEquals(1, cve4.getMetrics().getCvssMetricsV2().size());

	}
}
