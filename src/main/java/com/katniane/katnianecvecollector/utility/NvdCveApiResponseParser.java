package com.katniane.katnianecvecollector.utility;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.katniane.katnianecvecollector.controller.CveCollectorController;
import com.katniane.katnianecvecollector.domain.Cve;
import com.katniane.katnianecvecollector.domain.Cve.CveConfiguration;
import com.katniane.katnianecvecollector.domain.Cve.CveConfigurationNode;
import com.katniane.katnianecvecollector.domain.Cve.CveConfigurationNodeCpeMatch;
import com.katniane.katnianecvecollector.domain.Cve.CveDescription;
import com.katniane.katnianecvecollector.domain.Cve.CveMetrics;
import com.katniane.katnianecvecollector.domain.Cve.CveReference;
import com.katniane.katnianecvecollector.domain.Cve.CveWeakness;
import com.katniane.katnianecvecollector.domain.Cve.CvssData;
import com.katniane.katnianecvecollector.domain.Cve.CvssMetricV2;

public class NvdCveApiResponseParser {
	
	private static final Logger LOG = LoggerFactory.getLogger(NvdCveApiResponseParser.class);
	
	public static List<Cve> parseNvdCveApiResponse(String response) {
		LOG.info("Parsing NVD CVE API Response");
		
		List<Cve> cvesFound = new ArrayList<>();
		
		JsonElement jelement = JsonParser.parseString(response);
		JsonObject apiResult = jelement.getAsJsonObject();
		JsonArray vulnerabilities = apiResult.getAsJsonArray("vulnerabilities");
		
		// TODO: Check if all these cve elements are really needed for the project. Sounds like they all should be
		for (JsonElement vulnerability : vulnerabilities) {
			JsonObject vulnerabilityInfo = vulnerability.getAsJsonObject();
			JsonObject cveDetails = vulnerabilityInfo.get("cve").getAsJsonObject();
			//Cve.Builder();
			Cve cve = new Cve();
			cve.setId(getJsonElementAsString(cveDetails.get("id")));
			cve.setSourceIdentifier(getJsonElementAsString(cveDetails.get("sourceIdentifier")));
			cve.setPublished(getJsonElementAsString(cveDetails.get("published")));
			cve.setLastModified(getJsonElementAsString(cveDetails.get("lastModified")));
			cve.setVulnStatus(getJsonElementAsString(cveDetails.get("vulnStatus")));
			cve.setCisaActionDue(getJsonElementAsString(cveDetails.get("cisaActionDue")));
			cve.setCisaExploitAdd(getJsonElementAsString(cveDetails.get("cisaExploitAdd")));
			cve.setCisaRequiredAction(getJsonElementAsString(cveDetails.get("cisaRequiredAction")));
			cve.setCisaVulnerabilityName(getJsonElementAsString(cveDetails.get("cisaVulnerabilityName")));
			//cve.setDescriptions(parseCveDescriptionsDetails(cve, cveDetails.getAsJsonArray("descriptions")));
			//cve.setWeaknesses(parseCveWeaknessesDetails(cve, cveDetails.getAsJsonArray("weaknesses")));
			//cve.setConfigurations(parseCveConfigurationsDetails(cve, cveDetails.getAsJsonArray("configurations")));
			cve.setMetrics(parseCveMetricsDetails(cve, cveDetails.get("metrics").getAsJsonObject()));
			cve.setReferences(parseCveReferencesDetails(cve, cveDetails.getAsJsonArray("references")));

			cvesFound.add(cve);
		}
		
		return cvesFound;
	}
	
	private static List<CveDescription> parseCveDescriptionsDetails(Cve cve, JsonArray cveDescriptionJsonArray) {
		List<CveDescription> cveDescriptions = new ArrayList<>();
		for (JsonElement cveDescriptionJsonElement : cveDescriptionJsonArray) {
			JsonObject cveDescriptionJsonObject = cveDescriptionJsonElement.getAsJsonObject();
			
			CveDescription cveDescription = cve.new CveDescription();
			cveDescription.setLang(getJsonElementAsString(cveDescriptionJsonObject.get("lang")));
			cveDescription.setValue(getJsonElementAsString(cveDescriptionJsonObject.get("value")));
			
			cveDescriptions.add(cveDescription);
		}
		
		return cveDescriptions;
	}
	
	private static List<CveWeakness> parseCveWeaknessesDetails(Cve cve, JsonArray cveWeaknessJsonArray) {
		List<CveWeakness> cveWeaknesses = new ArrayList<>();
		for (JsonElement cveWeaknessJsonElement : cveWeaknessJsonArray) {
			JsonObject cveWeaknessJsonObject = cveWeaknessJsonElement.getAsJsonObject();
			
			CveWeakness cveWeakness = cve.new CveWeakness();
			cveWeakness.setType(getJsonElementAsString(cveWeaknessJsonObject.get("type")));
			cveWeakness.setSource(getJsonElementAsString(cveWeaknessJsonObject.get("source")));
			cveWeakness.setDescription(parseCveDescriptionsDetails(cve, cveWeaknessJsonObject.getAsJsonArray("description")));
			
			cveWeaknesses.add(cveWeakness);
		}
		
		return cveWeaknesses;
	}
	
	private static List<CveConfiguration> parseCveConfigurationsDetails(Cve cve, JsonArray cveConfigurationJsonArray) {
		List<CveConfiguration> cveConfigurations = new ArrayList<>();
		for (JsonElement cveConfigurationJsonElement : cveConfigurationJsonArray) {
			JsonObject cveConfiguration = cveConfigurationJsonElement.getAsJsonObject();
			JsonArray cveConfigurationNodeJsonArray = cveConfiguration.getAsJsonArray("nodes");
			
			cveConfigurations.add(cve.new CveConfiguration( //
						parseCveConfigurationNodesDetails(cve, cveConfigurationNodeJsonArray) //
					)
			);
		}
		return cveConfigurations;
	}
	
	private static List<CveConfigurationNode> parseCveConfigurationNodesDetails(Cve cve, JsonArray cveConfigurationNodeJsonArray) {
		List<CveConfigurationNode> cveConfigurationNodes = new ArrayList<>();
		for (JsonElement cveConfigurationNodeJsonElement : cveConfigurationNodeJsonArray) {
			JsonObject cveConfigurationNodeJsonObject = cveConfigurationNodeJsonElement.getAsJsonObject();
			CveConfigurationNode cveConfigurationNode = cve.new CveConfigurationNode();
			cveConfigurationNode.setNegate(cveConfigurationNodeJsonObject.get("negate").getAsBoolean());
			cveConfigurationNode.setOperator(getJsonElementAsString(cveConfigurationNodeJsonObject.get("operator")));
			cveConfigurationNode.setCpeMatch(parseCveConfigurationNodeCpeMatchesDetails(cve, cveConfigurationNodeJsonObject.get("cpeMatch").getAsJsonArray()));
			
			cveConfigurationNodes.add(cveConfigurationNode);
		}
		return cveConfigurationNodes;
	}
	
	private static List<CveConfigurationNodeCpeMatch> parseCveConfigurationNodeCpeMatchesDetails(Cve cve, JsonArray cveConfigurationNodeCpeMatchesJsonArray) {
		List<CveConfigurationNodeCpeMatch> cveConfigurationNodeCpeMatches = new ArrayList<>();
		for (JsonElement cveConfigurationNodeCpeMatchJsonElement : cveConfigurationNodeCpeMatchesJsonArray) {
			JsonObject cveConfigurationNodeCpeMatchJsonObject = cveConfigurationNodeCpeMatchJsonElement.getAsJsonObject();
			
			CveConfigurationNodeCpeMatch cveConfigurationNodeCpeMatch = cve.new CveConfigurationNodeCpeMatch();
			cveConfigurationNodeCpeMatch.setCriteria(getJsonElementAsString(cveConfigurationNodeCpeMatchJsonObject.get("criteria")));
			cveConfigurationNodeCpeMatch.setMatchCriteriaId(getJsonElementAsString(cveConfigurationNodeCpeMatchJsonObject.get("matchCriteriaId")));
			cveConfigurationNodeCpeMatch.setVulnerable(cveConfigurationNodeCpeMatchJsonObject.get("vulnerable").getAsBoolean());
			cveConfigurationNodeCpeMatches.add(cveConfigurationNodeCpeMatch);
		}
		
		return cveConfigurationNodeCpeMatches;
	}
	
	private static CveMetrics parseCveMetricsDetails(Cve cve, JsonObject cveMetricJsonObject) {
		JsonArray cvssMetricV2JsonArray = cveMetricJsonObject.getAsJsonArray("cvssMetricV2");
		CveMetrics cveMetrics = cve.new CveMetrics();
		//cveMetrics.setCvssMetricsV2(parseCvssMetricV2Details(cve, cvssMetricV2JsonArray));
		cveMetrics.setBaseScore(parseCvssMetricV2Details(cve, cvssMetricV2JsonArray));
		return cveMetrics;
	}
	
	private static double parseCvssMetricV2Details(Cve cve, JsonArray cvssMetricV2JsonArray) {
		
		/*
		List<CvssMetricV2> cvssMetricsV2 = new ArrayList<>();
		for (JsonElement cvssMetricV2JsonElement : cvssMetricV2JsonArray) {
			JsonObject cvssMetricV2JsonObject = cvssMetricV2JsonElement.getAsJsonObject();
			CvssMetricV2 cvssMetricV2 = cve.new CvssMetricV2();
			cvssMetricV2.setAcInsufInfo(getJsonElementAsBoolean(cvssMetricV2JsonObject.get("acInsufInfo")));
			cvssMetricV2.setBaseSeverity(getJsonElementAsString(cvssMetricV2JsonObject.get("baseSeverity")));
			cvssMetricV2.setCvssData(parseCvssDataDetails(cve, cvssMetricV2JsonObject.get("cvssData").getAsJsonObject()));
			cvssMetricV2.setExploitabilityScore(getJsonElementAsFloat(cvssMetricV2JsonObject.get("exploitabilityScore")));
			cvssMetricV2.setImpactScore(getJsonElementAsFloat(cvssMetricV2JsonObject.get("impactScore")));
			cvssMetricV2.setObtainAllPrivelege(getJsonElementAsBoolean(cvssMetricV2JsonObject.get("obtainAllPrivelege")));
			cvssMetricV2.setObtainOtherPrivelege(getJsonElementAsBoolean(cvssMetricV2JsonObject.get("obtainOtherPrivelege")));
			cvssMetricV2.setSource(getJsonElementAsString(cvssMetricV2JsonObject.get("source")));
			cvssMetricV2.setType(getJsonElementAsString(cvssMetricV2JsonObject.get("type")));
			cvssMetricV2.setUserInteractionRequired(getJsonElementAsBoolean(cvssMetricV2JsonObject.get("userInteractionRequired")));
			cvssMetricsV2.add(cvssMetricV2);
		}*/
		
		double cveBaseScore = 0.0;
		
		for (JsonElement cvssMetricV2JsonElement : cvssMetricV2JsonArray) {
			JsonObject cvssMetricV2JsonObject = cvssMetricV2JsonElement.getAsJsonObject();
			cveBaseScore = parseCvssDataDetails(cve, cvssMetricV2JsonObject.get("cvssData").getAsJsonObject());
		}
		
		return cveBaseScore;
	}
	
	private static double parseCvssDataDetails(Cve cve, JsonObject cvssDataJsonObject) {
		/*
		CvssData cvssData = cve.new CvssData();
		cvssData.setAccessComplexity(getJsonElementAsString(cvssDataJsonObject.get("accessComplexity")));
		cvssData.setAccessVector(getJsonElementAsString(cvssDataJsonObject.get("accessVector")));
		cvssData.setAuthenticity(getJsonElementAsString(cvssDataJsonObject.get("authenticity")));
		cvssData.setAvailabilityImpact(getJsonElementAsString(cvssDataJsonObject.get("availabilityImpact")));
		cvssData.setBaseScore(cvssDataJsonObject.get("baseScore").getAsDouble());
		cvssData.setConfidentialityImpact(getJsonElementAsString(cvssDataJsonObject.get("confidentialityImpact")));
		cvssData.setIntegrityImpact(getJsonElementAsString(cvssDataJsonObject.get("integrityImpact")));
		cvssData.setVectorString(getJsonElementAsString(cvssDataJsonObject.get("vectorString")));
		cvssData.setVersion(getJsonElementAsString(cvssDataJsonObject.get("version")));
		*/
		
		//return cvssData;
		
		return cvssDataJsonObject.get("baseScore").getAsDouble();
	}
	
	private static List<CveReference> parseCveReferencesDetails(Cve cve, JsonArray cveReferenceJsonArray) {
		List<CveReference> cveReferences = new ArrayList<>();
		for (JsonElement cveReferenceJsonElement : cveReferenceJsonArray) {
			JsonObject cveReferenceJsonObject = cveReferenceJsonElement.getAsJsonObject();
			//JsonArray cveReferenceNodeJsonArray = cveReferenceJsonObject.getAsJsonArray("nodes");
			
			CveReference cveReference = cve.new CveReference();
			cveReference.setSource(getJsonElementAsString(cveReferenceJsonObject.get("source")));
			cveReference.setUrl(getJsonElementAsString(cveReferenceJsonObject.get("url")));
			//cveReference.setTags(cveReferenceJsonObject.);
			cveReferences.add(cveReference);
		}
		return cveReferences;
	}
	
	private static String getJsonElementAsString(JsonElement jsonElement) {
		if (jsonElement == null) {
			return "";
		}
		return jsonElement.getAsString();
	}
	
	// NOTE: If a boolean jsonElement is null, then default it to false because the boolean element is likely not applicable anyway
	private static boolean getJsonElementAsBoolean(JsonElement jsonElement) {
		if (jsonElement == null) {
			return false;
		}
		return jsonElement.getAsBoolean();
	}
	
	// NOTE: If a float jsonElement is null, then default it to 0.0 because the float element is likely not applicable anyway
	// NOTE: Also, I used float data type for now because I think the parsing of object from MongoDB gets confused if things 
	// are int or double if there are no decimal points
	private static double getJsonElementAsDouble(JsonElement jsonElement) {
		if (jsonElement == null) {
			return 0.0;
		}
		return jsonElement.getAsDouble();
	}
}
