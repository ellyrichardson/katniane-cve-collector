package com.katniane.katnianecvecollector.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.katniane.katnianecvecollector.dataaccesslayer.CveDetailDao;
import com.katniane.katnianecvecollector.domain.Cve;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(value = "/")
public class CveCollectorController {
	
	private static final Logger LOG = LoggerFactory.getLogger(CveCollectorController.class);
	
	private static final String NVD_CVE_API = "https://services.nvd.nist.gov/rest/json/cves/2.0";
	
	private final CveDetailDao cveDetailDao;
	
	public CveCollectorController(CveDetailDao cveDetailDao) {
		this.cveDetailDao = cveDetailDao;
	}

	@RequestMapping(value = "/cpe/{cpeName}", method = RequestMethod.POST)
	public void getCveByCpeName(@PathVariable String cpeName) {
		LOG.info("Processing CPE name: {}", cpeName);
		if (!cveDetailDao.checkCpeExistence(cpeName)) {
			getCvesOfCpeFromNvdCveApi(cpeName);
		} else {
			getCvesOfCpeFromDB(cpeName);
		}
	}
	
	private void getCvesOfCpeFromNvdCveApi(String cpeName) {
		LOG.info("Retrieving CVE details from NVD CVE API for CPE: {}", cpeName);
		try {
			String urlEndpoint = NVD_CVE_API + "?" + "cpeName=" + cpeName;
			
			URL url = new URL (urlEndpoint);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			
			LOG.info("TESS");
			
			con.setRequestMethod("GET");
			con.setRequestProperty("Content-Type", "application/json");
			con.setRequestProperty("Accept", "application/json");
			
			// TODO: Handle this RuntimeException
			if (con.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ con.getResponseCode());
			}
			
			//----------------------
			// con.setDoOutput(true);
			
			/*
			LOG.info("TESS2");
			
			JSONObject cveReq = new JSONObject();
			cveReq.put("cpeName", cpeName);
			
			LOG.info("TESS3");
			
			// Create the Request Body
			try(OutputStream os = con.getOutputStream()) {
				LOG.info("TESS4");
			    byte[] input = cveReq.toString().getBytes("utf-8");
			    
			    LOG.info("Sending JSON message to NVD CVE API: {}", cveReq.toString());
			    os.write(input, 0, input.length);			
			}*/
			
			LOG.info("TESS5");
			
			// Read the Response From Input Stream
			try(BufferedReader br = new BufferedReader(
				new InputStreamReader(con.getInputStream(), "utf-8"))) {
				
				LOG.info("Received JSON response from NVD CVE API: {}", br.toString());
				
			    StringBuilder response = new StringBuilder();
			    String responseLine = null;
			    
			    while ((responseLine = br.readLine()) != null) {
			        response.append(responseLine.trim());
			    }
			    
			    System.out.println(response.toString());
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private List<Cve> parseNvdCveApiResponse(String response) {
		List<Cve> cvesFound = new ArrayList<>();
		
		JsonElement jelement = JsonParser.parseString(response);
		JsonObject apiResult = jelement.getAsJsonObject();
		JsonArray vulnerabilities = apiResult.getAsJsonArray("vulnerabilities");
		
		// TODO: Check if all these cve elements are really needed for the project. Sounds like they all should be
		for (JsonElement jsonElement : vulnerabilities) {
			JsonObject vulnerability = jsonElement.getAsJsonObject();
			//Cve.Builder();
			Cve cve = new Cve();
			cve.setId(vulnerability.get("id").getAsString());
			cve.setSourceIdentifier(vulnerability.get("sourceIdentifier").getAsString());
			cve.setPublished(vulnerability.get("published").getAsString());
			cve.setLastModified(vulnerability.get("lastModified").getAsString());
			cve.setVulnStatus(vulnerability.get("vulnStatus").getAsString());
			cve.setCisaActionDue(vulnerability.get("cisaActionDue").getAsString());
			cve.setCisaExploitAdd(vulnerability.get("cisaExploitAdd").getAsString());
			cve.setCisaRequiredAction(vulnerability.get("cisaRequiredAction").getAsString());
			cve.setCisaVulnerabilityName(vulnerability.get("cisaVulnerabilityName").getAsString());
			// TODO: add the other elements
			cvesFound.add(cve);
		}
		
		return cvesFound;
	}
	
	private void getCvesOfCpeFromDB(String cpeName) {
		LOG.info("Retrieving CVE details from Katniane DB for CPE: {}", cpeName);
	}
}
