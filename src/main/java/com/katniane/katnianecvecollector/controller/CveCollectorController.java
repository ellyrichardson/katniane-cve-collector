package com.katniane.katnianecvecollector.controller;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.katniane.katnianecvecollector.dataaccesslayer.CveDetailDao;
import com.katniane.katnianecvecollector.domain.Cpe;
import com.katniane.katnianecvecollector.domain.Cve;
import com.katniane.katnianecvecollector.domain.Cve.CveConfiguration;
import com.katniane.katnianecvecollector.domain.Cve.CveConfigurationNode;
import com.katniane.katnianecvecollector.domain.Cve.CveConfigurationNodeCpeMatch;
import com.katniane.katnianecvecollector.domain.Cve.CveDescription;
import com.katniane.katnianecvecollector.domain.Cve.CveMetrics;
import com.katniane.katnianecvecollector.domain.Cve.CveReference;
import com.katniane.katnianecvecollector.domain.Cve.CveWeakness;
import com.katniane.katnianecvecollector.domain.Cve.CvssData;
import com.katniane.katnianecvecollector.domain.Cve.CvssMetricV2;
import com.katniane.katnianecvecollector.utility.NvdCveApiResponseParser;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping(value = "/")
public class CveCollectorController {
	
	private static final Logger LOG = LoggerFactory.getLogger(CveCollectorController.class);
	
	private static final String NVD_CVE_API = "https://services.nvd.nist.gov/rest/json/cves/2.0";
	
	private final CveDetailDao cveDetailDao;
	
	public CveCollectorController(CveDetailDao cveDetailDao) {
		this.cveDetailDao = cveDetailDao;
	}

	@RequestMapping(value = "/cpe/{cpeName}", method = RequestMethod.GET)
	public void getCveByCpeName(@PathVariable String cpeName) {
		LOG.info("Processing CPE name: {}", cpeName);
		if (!cveDetailDao.checkCpeExistence(cpeName)) {
			getCvesOfCpeFromNvdCveApi(cpeName);
		} else {
			getCvesOfCpeFromDB(cpeName);
		}
	}
	
	private void getCvesOfCpeFromNvdCveApi(String cpeName) {
		LOG.info("Retrieving CVE details from NVD CVE API for CPE: {}", cpeName);
		try {
			String urlEndpoint = NVD_CVE_API + "?" + "cpeName=" + cpeName;
			
			URL url = new URL (urlEndpoint);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			
			con.setRequestMethod("GET");
			con.setRequestProperty("Content-Type", "application/json");
			con.setRequestProperty("Accept", "application/json");
			
			// TODO: Handle this RuntimeException
			if (con.getResponseCode() != 200) {
				throw new RuntimeException("Failed : HTTP error code : "
						+ con.getResponseCode());
			}
			
			// Read the Response From Input Stream
			try(BufferedReader br = new BufferedReader(
				new InputStreamReader(con.getInputStream(), "utf-8"))) {
				
				LOG.info("Received JSON response from NVD CVE API: {}", br.toString());
				
			    StringBuilder response = new StringBuilder();
			    String responseLine = null;
			    
			    while ((responseLine = br.readLine()) != null) {
			        response.append(responseLine.trim());
			    }
			    
			    List<Cve> cves = NvdCveApiResponseParser.parseNvdCveApiResponse(response.toString());
			    
			    Cpe cpeObject = new Cpe();
			    cpeObject.setCves(cves);
			    cpeObject.setId(cpeName);
			    
			    cveDetailDao.saveCpeWithCve(cpeObject);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void getCvesOfCpeFromDB(String cpeName) {
		LOG.info("Retrieving CVE details from Katniane DB for CPE: {}", cpeName);
	}
}
